from aiogram import types
from aiogram.utils.exceptions import Throttled
from aiohttp import ClientSession, ClientResponse
from io import BytesIO

from ..utils.photo_utils import prepare_photo
from ..misc import dp
from .. import config


@dp.message_handler(content_types=types.ContentType.PHOTO)
async def detect_photo(message: types.Message):
    try:
        await dp.throttle('detect_photo', rate=5)
    except Throttled:
        await message.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ!")
        return

    await types.ChatActions.upload_photo()

    photo = BytesIO()
    await message.photo[0].download(seek=True, destination=photo)
    photo_data = photo.read()
    photo.seek(0)
    async with ClientSession() as session:
        async with session.post(config.GAYBUSTER_API_URL, data={'photo': photo}, timeout=45) as request:  # type: ClientResponse
            if request.status >= 400:
                await message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
                return
            result = await request.json()

    if result['count'] == 0:
        await message.answer('–õ–∏—Ü–∞ –Ω–∞ —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ä–∞–∫—É—Ä—Å.')
        return

    prepared_photo = await dp.loop.run_in_executor(dp['process_pool_executor'], prepare_photo, photo_data, result['faces'])
    await message.answer_photo(
        prepared_photo,
        caption=(
            "üìï - –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –≥–µ–π\n"
            "üìô - –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å\n"
            "üìó - –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –Ω–µ –≥–µ–π\n\n"
            "–ì–µ–π–¥–µ—Ç–µ–∫—Ç–æ—Ä –º–æ–∂–µ—Ç –ø–ª–æ—Ö–æ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –∂–µ–Ω—â–∏–Ω–∞—Ö, –∞ —Ç–∞–∫ –∂–µ –Ω–∞ –º—É–∂—á–∏–Ω–∞—Ö –º–ª–∞–¥—à–µ 18 –∏ —Å—Ç–∞—Ä—à–µ 50"
        )
    )
